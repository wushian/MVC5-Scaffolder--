
<#+

// Should you be able to edit the property?
// Used by Insert, Edit forms to decide which properties to edit
bool ShouldEdit(PropertyMetadata property) {
	return property.Scaffold 
		&& !property.IsAutoGenerated 
		&& !property.IsReadOnly 
		&& !property.IsAssociation;
}


// Should display the property?
// Used by Default, Delete forms to decide which properties to display
bool ShouldDisplay(PropertyMetadata property) {
	return property.Scaffold 
		&& !property.IsAssociation;
}


// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName() {
    return (ModelMetadata.PrimaryKeys != null && ModelMetadata.PrimaryKeys.Count() == 1) ? ModelMetadata.PrimaryKeys[0].PropertyName : null;
}

// Returns the Includes required to get all related entities.
// For example, .Include(m => m.Actor).Include(m => m.Category) 
string GetIncludeExpressions() {
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	var includeExpressions = "";
	return String.Join("", relatedProperties.Values.Select(property => String.Format(".Include(m => m.{0})", property.AssociationPropertyName)));
}

#>