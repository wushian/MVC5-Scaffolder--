<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ import namespace="Happy.Scaffolding.MVC.Models" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
<#@ parameter type="System.String" name="MethodName" #>
<#@ parameter type="Happy.Scaffolding.MVC.Models.MetaTableInfo" name="QueryMetaTable" #>
<#@ parameter type="Happy.Scaffolding.MVC.Models.MetaTableInfo" name="ResultMetaTable" #>
<#@ parameter type="System.String" name="AllFilterColumnsText" #>
using OfficeOpenXml;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    string queryFilter = "vm."+AllFilterColumnsText.Replace(",", ", vm.");
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        //GET: <#= MethodName #>
        public ActionResult <#= MethodName #>()
        {
            return View();
        }

        //POST: <#= MethodName #>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult <#= MethodName #>(<#= MethodName #>_QueryFormViewModel vm)
        {
            vm.Result = db.<#= MethodName #>(<#=queryFilter#>).ToList();
            if (vm.DoExport && vm.Result.Count>0)
            {
                return <#= MethodName #>Export(vm.Result);
            }
            return View(vm);
        }


        private ActionResult <#= MethodName #>Export(List<<#= ModelTypeName #>> data)
        {
            //Export Excel
            using (ExcelPackage package = new ExcelPackage())
            {
                ExcelWorksheet ws = package.Workbook.Worksheets.Add("<#= ModelTypeName #>");
                int currRow = 1;
<#
    int columnIndex=0;
    foreach (MetaColumnInfo column in ResultMetaTable.Columns) {
        columnIndex+=1;
#>
                ws.Cells[currRow, <#=columnIndex#>].Value = "<#=column.DisplayName#>";
<#
    }
#>
                foreach (<#= ModelTypeName #> item in data)
                {
                    currRow += 1;
<#
    columnIndex=0;
    foreach (MetaColumnInfo column in ResultMetaTable.Columns) {
        columnIndex+=1;
#>
                    ws.Cells[currRow, <#=columnIndex#>].Value = item.<#=column.Name#>;
<#
    }
#>
                }
                //輸出
                var stream = new MemoryStream();
                package.SaveAs(stream);
                string fileName = string.Format("<#= MethodName #>-{0}.xlsx", System.DateTime.Today.ToString("yyyy-MM-dd"));
                string contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                stream.Position = 0;
                return File(stream, contentType, fileName);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>